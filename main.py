import os
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from fastapi import FastAPI, Request
import uvicorn

load_dotenv()

AWAITING_ANSWERS, AWAITING_PHOTOS = range(2)
ADMIN_CHAT_ID = 1870625035
GOOGLE_FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLScfK-ItvQQhK4cfG2pymvApwGymnAkgI2c8ibOjWLfBgfFSiA/viewform?usp=header"
PDF_PATH = "DIVA CENTRAL ASIA 25- –†–ï–ì–õ–ê–ú–ï–ù–¢.pdf"

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–≥–ª–∞–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data='regulations')],
        [InlineKeyboardButton("‚úèÔ∏è –ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='participant_form')],
        [InlineKeyboardButton("üé• –ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ", callback_data='participation_application')],
        [InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='additional_info')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_main_menu())
    context.user_data.pop('regulation_message_id', None)

async def show_regulations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await query.message.delete()
    except: pass
    with open(PDF_PATH, 'rb') as pdf_file:
        sent_message = await query.message.chat.send_document(document=pdf_file)
    context.user_data['regulation_message_id'] = sent_message.message_id
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    await query.message.chat.send_message("üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º:", reply_markup=InlineKeyboardMarkup(keyboard))

async def participant_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìù –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∫–µ—Ç–µ", url=GOOGLE_FORM_URL)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    await query.edit_message_text("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def additional_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ú® <b>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!</b>\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 776 121 76 71\n"
        "üí¨ <b>Telegram:</b> @Simon_dj_Simon\n"
        "üì∏ <b>Instagram:</b> <a href='https://www.instagram.com/central_station_astana?igsh=MWJqdnFwbDZmeHlocg'>@central_station_astana</a>"
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        if 'regulation_message_id' in context.user_data:
            await query.message.chat.delete_message(context.user_data['regulation_message_id'])
            context.user_data.pop('regulation_message_id')
        await query.message.delete()
    except: pass
    await query.message.chat.send_message('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())

async def participation_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìå –û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞:\n\n"
        "1Ô∏è‚É£ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n2Ô∏è‚É£ –ü—Å–µ–≤–¥–æ–Ω–∏–º\n3Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç\n4Ô∏è‚É£ –ì–æ—Ä–æ–¥\n"
        "5Ô∏è‚É£ –û–ø—ã—Ç\n6Ô∏è‚É£ –†–µ–ø–µ—Ä—Ç—É–∞—Ä\n7Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω –∏ email\n\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3‚Äì4 —Ñ–æ—Ç–æ."
    )
    await query.message.reply_text(text)
    return AWAITING_ANSWERS

async def receive_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = update.message.text
    context.user_data['photos'] = []
    await update.message.reply_text("–û—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 3‚Äì4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
    return AWAITING_PHOTOS

async def receive_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = context.user_data.get('photos', [])
    photos.append(update.message.photo[-1].file_id)
    context.user_data['photos'] = photos

    if len(photos) >= 3:
        keyboard = [[InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='save_registration')]]
        await update.message.reply_text(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(photos)}). –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(photos)}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë.")
    return AWAITING_PHOTOS

async def save_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    answers = context.user_data.get('answers')
    photos = context.user_data.get('photos', [])
    if not answers or len(photos) < 3:
        await query.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç!", show_alert=True)
        return AWAITING_PHOTOS
    user = query.from_user
    await context.bot.send_message(ADMIN_CHAT_ID, f"–ó–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.full_name}:\n\n{answers}")
    await context.bot.send_media_group(ADMIN_CHAT_ID, [InputMediaPhoto(p) for p in photos])
    await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º! –°–ø–∞—Å–∏–±–æ.")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

# ---- FastAPI + Webhook —á–∞—Å—Ç—å ----

app = FastAPI()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN")
WEBHOOK_PATH = f"/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"

application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(participation_application, pattern='participation_application')],
    states={
        AWAITING_ANSWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_answers)],
        AWAITING_PHOTOS: [
            MessageHandler(filters.PHOTO, receive_photos),
            CallbackQueryHandler(save_registration, pattern='save_registration')
        ],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)
application.add_handler(CallbackQueryHandler(show_regulations, pattern='regulations'))
application.add_handler(CallbackQueryHandler(participant_form, pattern='participant_form'))
application.add_handler(CallbackQueryHandler(additional_info, pattern='additional_info'))
application.add_handler(CallbackQueryHandler(back_to_menu, pattern='back_to_menu'))

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    print(f"Webhook —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è: {WEBHOOK_URL}")
    await application.bot.set_webhook(WEBHOOK_URL)

@app.post(WEBHOOK_PATH)
async def process_update(request: Request):
    json_data = await request.json()
    update = Update.de_json(json_data, application.bot)
    await application.process_update(update)
    return "ok"

def main():
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
