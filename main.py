import os
import threading
from fastapi import FastAPI
import uvicorn

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

AWAITING_ANSWERS, AWAITING_PHOTOS = range(2)

TOKEN = '8196984264:AAE4Y3f_RpzmoPN-s6iXJhgA72bVoXiZCoM'
ADMIN_CHAT_ID = 1870625035  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# --- –ó–¥–µ—Å—å —Ç–≤–æ–∏ –≤—Å–µ async —Ñ—É–Ω–∫—Ü–∏–∏-—Ö–µ–Ω–¥–ª–µ—Ä—ã, –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ ---
# start, show_regulations, participant_form, additional_info, back_to_menu,
# participation_application, receive_answers, receive_photos,
# save_registration, cancel

# –ù–∏–∂–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∂—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())
        context.user_data.pop('regulation_message_id', None)
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        if 'regulation_message_id' in context.user_data:
            try:
                await query.message.chat.delete_message(context.user_data['regulation_message_id'])
            except Exception:
                pass
            context.user_data.pop('regulation_message_id')

        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–≥–ª–∞–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data='regulations')],
        [InlineKeyboardButton("‚úèÔ∏è –ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='participant_form')],
        [InlineKeyboardButton("üé• –ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ", callback_data='participation_application')],
        [InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='additional_info')]
    ]
    return InlineKeyboardMarkup(keyboard)

app_api = FastAPI()

@app_api.get("/health")
async def health():
    return {"status": "ok"}

def run_webserver():
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app_api, host="0.0.0.0", port=port)

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º—ã–π –ø–æ—Ä—Ç)
    threading.Thread(target=run_webserver, daemon=True).start()

    # –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(participation_application, pattern='participation_application')],
        states={
            AWAITING_ANSWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_answers)],
            AWAITING_PHOTOS: [
                MessageHandler(filters.PHOTO, receive_photos),
                CallbackQueryHandler(save_registration, pattern='save_registration')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv_handler)

    app.add_handler(CallbackQueryHandler(show_regulations, pattern='regulations'))
    app.add_handler(CallbackQueryHandler(participant_form, pattern='participant_form'))
    app.add_handler(CallbackQueryHandler(additional_info, pattern='additional_info'))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern='back_to_menu'))

    app.run_polling()

if __name__ == '__main__':
    main()
