from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

AWAITING_ANSWERS, AWAITING_PHOTOS = range(2)

TOKEN = '8196984264:AAE4Y3f_RpzmoPN-s6iXJhgA72bVoXiZCoM'
ADMIN_CHAT_ID = 1870625035  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–≥–ª–∞–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data='regulations')],
        [InlineKeyboardButton("‚úèÔ∏è –ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='participant_form')],
        [InlineKeyboardButton("üé• –ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ", callback_data='participation_application')],
        [InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='additional_info')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_regulations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pdf_path = "DIVA CENTRAL ASIA 25- –†–ï–ì–õ–ê–ú–ï–ù–¢.pdf"

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª callback)
    try:
        await query.message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    with open(pdf_path, 'rb') as pdf_file:
        sent_message = await query.message.chat.send_document(
            document=pdf_file,
            filename="DIVA CENTRAL ASIA 25- –†–ï–ì–õ–ê–ú–ï–ù–¢.pdf"
        )
    context.user_data['regulation_message_id'] = sent_message.message_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.chat.send_message(
        "üìÑ –í–æ—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())
        # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id —Ñ–∞–π–ª–∞
        context.user_data.pop('regulation_message_id', None)
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'regulation_message_id' in context.user_data:
            try:
                await query.message.chat.delete_message(context.user_data['regulation_message_id'])
            except Exception:
                pass
            context.user_data.pop('regulation_message_id')

        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())

GOOGLE_FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLScfK-ItvQQhK4cfG2pymvApwGymnAkgI2c8ibOjWLfBgfFSiA/viewform?usp=header"

async def participant_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìù –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∫–µ—Ç–µ", url=GOOGLE_FORM_URL)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="‚úèÔ∏è –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def additional_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "‚ú® <b>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!</b>\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω / WhatsApp:</b> +7 776 121 76 71\n"
        "üí¨ <b>Telegram:</b> @Simon_dj_Simon\n"
        "üì∏ <b>Instagram:</b> <a href='https://www.instagram.com/central_station_astana?igsh=MWJqdnFwbDZmeHlocg'>@central_station_astana</a>\n\n"
        "üíñ –ù–∞–ø–∏—à–∏ –Ω–∞–º ‚Äî –∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å—ë, "
        "—á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç —Ç–µ–±—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ —Å—Ü–µ–Ω—É!"
    )
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º (PDF), –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'regulation_message_id' in context.user_data:
        try:
            await query.message.chat.delete_message(context.user_data['regulation_message_id'])
        except Exception:
            pass
        context.user_data.pop('regulation_message_id')

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏–ª–∏ –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
    try:
        await query.message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
    await query.message.chat.send_message('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=get_main_menu())

async def participation_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "1Ô∏è‚É£ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º\n"
        "2Ô∏è‚É£ –°—Ü–µ–Ω–∏—á–µ—Å–∫–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º\n"
        "3Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç\n"
        "4Ô∏è‚É£ –°—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n"
        "5Ô∏è‚É£ –û–ø—ã—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π\n"
        "6Ô∏è‚É£ –†–µ–ø–µ—Ä—Ç—É–∞—Ä –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞\n"
        "7Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ 3‚Äì4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±—Ä–∞–∑–µ."
    )
    await query.message.reply_text(text)
    return AWAITING_ANSWERS

async def receive_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = update.message.text
    context.user_data['photos'] = []
    await update.message.reply_text("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3‚Äì4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±—Ä–∞–∑–µ.")
    return AWAITING_PHOTOS

async def receive_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = context.user_data.get('photos', [])
    photos.append(update.message.photo[-1].file_id)
    context.user_data['photos'] = photos

    if len(photos) >= 3:
        keyboard = [[InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='save_registration')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(photos)}/4). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(photos)}/4). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ.")
    return AWAITING_PHOTOS

async def save_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    answers = context.user_data.get('answers')
    photos = context.user_data.get('photos', [])

    if not answers:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏.", show_alert=True)
        return AWAITING_ANSWERS

    if len(photos) < 3:
        await query.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", show_alert=True)
        return AWAITING_PHOTOS

    user = query.from_user
    header = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.full_name}:\n\n"
    await context.bot.send_message(ADMIN_CHAT_ID, header + answers)

    media = [InputMediaPhoto(file_id) for file_id in photos]
    await context.bot.send_media_group(ADMIN_CHAT_ID, media)

    await query.edit_message_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º! –°–ø–∞—Å–∏–±–æ!")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(participation_application, pattern='participation_application')],
        states={
            AWAITING_ANSWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_answers)],
            AWAITING_PHOTOS: [
                MessageHandler(filters.PHOTO, receive_photos),
                CallbackQueryHandler(save_registration, pattern='save_registration')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv_handler)

    app.add_handler(CallbackQueryHandler(show_regulations, pattern='regulations'))
    app.add_handler(CallbackQueryHandler(participant_form, pattern='participant_form'))
    app.add_handler(CallbackQueryHandler(additional_info, pattern='additional_info'))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern='back_to_menu'))

    app.run_polling()

if __name__ == '__main__':
    main()
